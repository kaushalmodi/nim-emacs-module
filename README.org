#+title: Emacs Module API in Nim

* What is this?
This is a wrapper library to use Emacs Dynamic Module feature from Nim
language.

Note that the Emacs Dynamic Module feature is supported from Emacs
25.1 onwards.
** Note
I'm either Nim and C language's newbie, so probably I'm doing
something wrong... So beware. (PRs are welcome!)
** Requirements
- Emacs with version 25.1 or higher compiled with the =--with-modules=
  configure option.
** GPL compatibility
In order for Emacs to load Dynamic Modules, like the ones created
using this package, the modules need to export a symbol named
=plugin_is_GPL_compatible= to indicate that that code is released
under the GPL or compatible license.

If this symbol is not exported, Emacs will refuse the module and error
out with "Module is not GPL compatible".

For that reason, all modules compiled using this package will export
the =plugin_is_GPL_compatible= symbol. This is done in the
[[file:emacs_module/helpers.nim][=helpers.nim=]].
** Usage Example
1. Clone this repo.
2. =cd test=
3. =make sample=

- If the above =make= step fails, set =EMACS_MODULE_DIR= to the
  directory containing the =emacs-module.h= header file. Example:
  =make sample EMACS_MODULE_DIR=/dir/containing/emacs-module.h/=.
*** Output
#+begin_example
emacs --batch -L .  -l test.el -f ert-run-tests-batch-and-exit
Running 6 tests (2018-06-21 15:27:04-0400, selector ‘t’)
   passed  1/6  sample-mod-test-non-local-exit-signal-test (0.055210 sec)
   passed  2/6  sample-mod-test-non-local-exit-throw-test (0.000234 sec)
   passed  3/6  sample-mod-test-return-t (0.000264 sec)
   passed  4/6  sample-mod-test-return-uname-cmd (0.000247 sec)
   passed  5/6  sample-mod-test-sum (0.000267 sec)
   passed  6/6  sample-mod-test-vector-test (0.001737 sec)

Ran 6 tests, 6 results as expected (2018-06-21 15:27:04-0400, 0.058906 sec)
#+end_example
** Another Example
The [[file:test/return42.nim][=return42.nim=]] example shows how simple it is to write a Nim proc
with the same functionality as that of the =mymod_test= function in
the [[http://diobla.info/blog-archive/modules-tut.html][Emacs Modules tutorial]].

All you do is:

#+begin_example
import emacs_module

init(emacs)

emacs.defun(return42, 0):
  return env.make_integer(env, 42)

emacs.provide()
#+end_example

Assuming that you already are past Steps 1 and 2 above, do:

#+begin_example
make return42
#+end_example
*** Output
#+begin_example
emacs --batch -L .  -l test-return42.el -f ert-run-tests-batch-and-exit
Running 1 tests (2018-06-21 16:48:28-0400, selector ‘t’)
   passed  1/1  return42-return42-cmd (0.000421 sec)

Ran 1 tests, 1 results as expected (2018-06-21 16:48:28-0400, 0.000766 sec)
#+end_example
** Other References
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Writing-Dynamic-Modules.html][Emacs Manual -- Writing Dynamic Modules]]
- [[http://diobla.info/blog-archive/modules-tut.html][Introduction to Emacs modules]]
- [[https://github.com/syohex/emacs-mruby-test][emacs-mruby-test]]
- M-x view-emacs-news and then look at =Emacs can now load
  shared/dynamic libraries (modules).= section
- modules directory of Emacs repository
- [[https://mrosset.github.io/emacs-module/][Go + Emacs Modules]]
- [[https://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses][GPL Compatible Licenses]]
- [[http://phst.github.io/emacs-modules.html][Emacs Modules Documentation]]
